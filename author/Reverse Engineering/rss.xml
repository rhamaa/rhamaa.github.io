<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>127.0.0.1:4000</title>
   
   <link>127.0.0.1:4000</link>
   <description>CTF, InfoSec, Banana And More..</description>
   <language>en-uk</language>
   <managingEditor> Aiden Pearce</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Basic Reverse Engineering Linux Binaries</title>
	  <link>//basic-reverse-engineering-linux-binaries</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-24T02:06:00+08:00</pubDate>
	  <guid>//basic-reverse-engineering-linux-binaries</guid>
	  <description><![CDATA[
	     <p>Assalamualaikum.
Saya akan sedikit membahas basic dalam melakukan reverse engineering elf binnary, reverse engineering sendiri sangat penting apalagi dalam challenge CTF yang biasa nya mempunyai poin yang besar.</p>

<h1 id="the-code">The Code</h1>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="n">root</span><span class="err">@</span><span class="nl">kali</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="n">cat</span> <span class="n">rev</span><span class="p">.</span><span class="n">c</span>
<span class="cp">#include</span> 
<span class="cpf">int main(){</span><span class="cp"></span>
	<span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
	<span class="n">a</span> <span class="o">=</span> <span class="mi">306</span><span class="p">;</span>
	<span class="n">b</span> <span class="o">=</span> <span class="mi">737</span><span class="p">;</span>
	<span class="n">c</span> <span class="o">=</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;Enter your passcode : &quot;</span><span class="p">);</span>
	<span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="n">c</span><span class="p">){</span>
		<span class="n">puts</span><span class="p">(</span><span class="s">&quot;Correct&quot;</span><span class="p">);</span>
	<span class="k">else</span><span class="p">{</span>
		<span class="n">puts</span><span class="p">(</span><span class="s">&quot;Incorrect&quot;</span><span class="p">);</span>			
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
			</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="n">root</span><span class="err">@</span><span class="nl">kali</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="n">gcc</span> <span class="n">rev</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">rev</span>
<span class="n">root</span><span class="err">@</span><span class="nl">kali</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="n">gdb</span> <span class="o">-</span><span class="n">q</span> <span class="n">rev</span>
<span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">set</span> <span class="n">disassembly</span><span class="o">-</span><span class="n">flavor</span> <span class="n">intel</span>
<span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">disass</span> <span class="n">main</span>
<span class="n">Dump</span> <span class="n">of</span> <span class="n">assembler</span> <span class="n">code</span> <span class="k">for</span> <span class="n">function</span> <span class="nl">main</span><span class="p">:</span>
<span class="mh">0x0000555555554760</span> <span class="o">&lt;+</span><span class="mi">0</span><span class="o">&gt;:</span>    <span class="n">push</span>   <span class="n">rbp</span>
<span class="mh">0x0000555555554761</span> <span class="o">&lt;+</span><span class="mi">1</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">rbp</span><span class="p">,</span><span class="n">rsp</span>
<span class="mh">0x0000555555554764</span> <span class="o">&lt;+</span><span class="mi">4</span><span class="o">&gt;:</span>    <span class="n">sub</span>    <span class="n">rsp</span><span class="p">,</span><span class="mh">0x10</span>
<span class="mh">0x0000555555554768</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="mh">0x132</span>
<span class="mh">0x000055555555476f</span> <span class="o">&lt;+</span><span class="mi">15</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">],</span><span class="mh">0x2e1</span>
<span class="mh">0x0000555555554776</span> <span class="o">&lt;+</span><span class="mi">22</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">]</span>
<span class="mh">0x0000555555554779</span> <span class="o">&lt;+</span><span class="mi">25</span><span class="o">&gt;:</span>    <span class="n">imul</span>   <span class="n">edx</span><span class="p">,</span><span class="n">eax</span><span class="p">,</span><span class="mh">0x64</span>
<span class="mh">0x000055555555477c</span> <span class="o">&lt;+</span><span class="mi">28</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">]</span>
<span class="mh">0x000055555555477f</span> <span class="o">&lt;+</span><span class="mi">31</span><span class="o">&gt;:</span>    <span class="n">add</span>    <span class="n">eax</span><span class="p">,</span><span class="n">edx</span>
<span class="mh">0x0000555555554781</span> <span class="o">&lt;+</span><span class="mi">33</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">],</span><span class="n">eax</span>
<span class="mh">0x0000555555554784</span> <span class="o">&lt;+</span><span class="mi">36</span><span class="o">&gt;:</span>    <span class="n">lea</span>    <span class="n">rdi</span><span class="p">,[</span><span class="n">rip</span><span class="o">+</span><span class="mh">0xd9</span><span class="p">]</span>        <span class="err">#</span> <span class="mh">0x555555554864</span>
<span class="mh">0x000055555555478b</span> <span class="o">&lt;+</span><span class="mi">43</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
<span class="mh">0x0000555555554790</span> <span class="o">&lt;+</span><span class="mi">48</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x555555554600</span> <span class="o">&lt;</span><span class="n">printf</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
<span class="mh">0x0000555555554795</span> <span class="o">&lt;+</span><span class="mi">53</span><span class="o">&gt;:</span>    <span class="n">lea</span>    <span class="n">rax</span><span class="p">,[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x10</span><span class="p">]</span>
<span class="mh">0x0000555555554799</span> <span class="o">&lt;+</span><span class="mi">57</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">rsi</span><span class="p">,</span><span class="n">rax</span>
<span class="mh">0x000055555555479c</span> <span class="o">&lt;+</span><span class="mi">60</span><span class="o">&gt;:</span>    <span class="n">lea</span>    <span class="n">rdi</span><span class="p">,[</span><span class="n">rip</span><span class="o">+</span><span class="mh">0xd7</span><span class="p">]</span>        <span class="err">#</span> <span class="mh">0x55555555487a</span>
<span class="mh">0x00005555555547a3</span> <span class="o">&lt;+</span><span class="mi">67</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
<span class="mh">0x00005555555547a8</span> <span class="o">&lt;+</span><span class="mi">72</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x555555554610</span> <span class="o">&lt;</span><span class="n">__isoc99_scanf</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
<span class="mh">0x00005555555547ad</span> <span class="o">&lt;+</span><span class="mi">77</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x10</span><span class="p">]</span>
<span class="mh">0x00005555555547b0</span> <span class="o">&lt;+</span><span class="mi">80</span><span class="o">&gt;:</span>    <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">]</span>
<span class="mh">0x00005555555547b3</span> <span class="o">&lt;+</span><span class="mi">83</span><span class="o">&gt;:</span>    <span class="n">jne</span>    <span class="mh">0x5555555547c3</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mi">99</span><span class="o">&gt;</span>
<span class="mh">0x00005555555547b5</span> <span class="o">&lt;+</span><span class="mi">85</span><span class="o">&gt;:</span>    <span class="n">lea</span>    <span class="n">rdi</span><span class="p">,[</span><span class="n">rip</span><span class="o">+</span><span class="mh">0xc1</span><span class="p">]</span>        <span class="err">#</span> <span class="mh">0x55555555487d</span>
<span class="mh">0x00005555555547bc</span> <span class="o">&lt;+</span><span class="mi">92</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x5555555545f0</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
<span class="mh">0x00005555555547c1</span> <span class="o">&lt;+</span><span class="mi">97</span><span class="o">&gt;:</span>    <span class="n">jmp</span>    <span class="mh">0x5555555547cf</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mi">111</span><span class="o">&gt;</span>
<span class="mh">0x00005555555547c3</span> <span class="o">&lt;+</span><span class="mi">99</span><span class="o">&gt;:</span>    <span class="n">lea</span>    <span class="n">rdi</span><span class="p">,[</span><span class="n">rip</span><span class="o">+</span><span class="mh">0xbb</span><span class="p">]</span>        <span class="err">#</span> <span class="mh">0x555555554885</span>
<span class="mh">0x00005555555547ca</span> <span class="o">&lt;+</span><span class="mi">106</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x5555555545f0</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span>
<span class="mh">0x00005555555547cf</span> <span class="o">&lt;+</span><span class="mi">111</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="mh">0x0</span>
<span class="mh">0x00005555555547d4</span> <span class="o">&lt;+</span><span class="mi">116</span><span class="o">&gt;:</span>    <span class="n">leave</span>  
<span class="mh">0x00005555555547d5</span> <span class="o">&lt;+</span><span class="mi">117</span><span class="o">&gt;:</span>    <span class="n">ret</span>    
<span class="n">End</span> <span class="n">of</span> <span class="n">assembler</span> <span class="n">dump</span><span class="p">.</span></code></pre></figure>

<p>Command <code>set disassembly-flavor intel</code> digunakan agar hasil 
disassembly menggunakan syntax intel, karena terdapat 2 syntax pada gdb yaitu att dan intel. 
Sedangkan <code>disass main</code> merupakan command untuk melakukan disassembly pada fungsi main, apabila ingin melakukan disassembly pada fungsi lain bisa menggunakan <code>disass nama_fungsi</code>.</p>

<p>Dari hasil disassembly diatas, terdapat instruksi yang akan memindahkan nilai hex 0x132 ke rbp-0x4 dan 0x2e1 rbp-0x8.
Yang apabila 0x132 dan 0x2e1 dikonversi ke decimal akan menghasilkan 306 dan 737 sama seperti nilai dari variable a,b.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x0000555555554768</span> <span class="o">&lt;+</span><span class="mi">8</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">],</span><span class="mh">0x132</span>
<span class="mh">0x000055555555476f</span> <span class="o">&lt;+</span><span class="mi">15</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">],</span><span class="mh">0x2e1</span></code></pre></figure>

<p>Selanjutnya nilai 0x132 yang tersimpan pada rbp-0x4 akan dipindahkan ke register eax</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x0000555555554776</span> <span class="o">&lt;+</span><span class="mi">22</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x4</span><span class="p">]</span></code></pre></figure>

<p>Lalu terdapat intruksi imul, imul digunakan untuk melakukan operasi perkalian
pada intruksi ini terdapat 0x64 ( konversi ke decimal = 100, sama seperti yang di source code), yang akan dikalikan dengan register eax ( nilai 0x132 ), 0x64 * 0x132 = 0x7788, dan hasil kali tersebut akan disimpan di register edx.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x0000555555554779</span> <span class="o">&lt;+</span><span class="mi">25</span><span class="o">&gt;:</span>    <span class="n">imul</span>   <span class="n">edx</span><span class="p">,</span><span class="n">eax</span><span class="p">,</span><span class="mh">0x64</span></code></pre></figure>

<p>Selanjutnya nilai 0x2e1 yang tersimpan pada rbp-0x8 akan dipindahkan ke register eax</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x000055555555477c</span> <span class="o">&lt;+</span><span class="mi">28</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x8</span><span class="p">]</span></code></pre></figure>

<p>Sehingga masuk pada intruksi add yang melakukan operasi pertambahan antara 0x2e1 + 0x7788 = 0x7a69 (31337), lalu akan memindahkan nilai 0x7a69 pada eax ke rbp-0xc, setelah itu baru memindahkan user input (scanf) yang tersimpan sementara di rbp-0x10 ke register eax.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x000055555555477f</span> <span class="o">&lt;+</span><span class="mi">31</span><span class="o">&gt;:</span>    <span class="n">add</span>    <span class="n">eax</span><span class="p">,</span><span class="n">edx</span>
<span class="mh">0x0000555555554781</span> <span class="o">&lt;+</span><span class="mi">33</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">],</span><span class="n">eax</span>
        <span class="o">---</span> <span class="n">snip</span> <span class="o">---</span>
<span class="mh">0x00005555555547ad</span> <span class="o">&lt;+</span><span class="mi">77</span><span class="o">&gt;:</span>    <span class="n">mov</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0x10</span><span class="p">]</span></code></pre></figure>

<p>Setelah itu intruksi cmp akan melakukan compare antara nilai 0x7a69 yang berada di rbp-0xc dan inputan passcode kita yang berada di eax.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x00005555555547b0</span> <span class="o">&lt;+</span><span class="mi">80</span><span class="o">&gt;:</span>    <span class="n">cmp</span>    <span class="n">eax</span><span class="p">,</span><span class="n">DWORD</span> <span class="n">PTR</span> <span class="p">[</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0xc</span><span class="p">]</span></code></pre></figure>

<p>Apabila hasil compare tidak sama (jne = jump if not equal), maka akan menuju offset 0x5555555547c3 dan mengeluarkan pesan “Incorrect”.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x00005555555547b3</span> <span class="o">&lt;+</span><span class="mi">83</span><span class="o">&gt;:</span>    <span class="n">jne</span>    <span class="mh">0x5555555547c3</span> <span class="o">&lt;</span><span class="n">main</span><span class="o">+</span><span class="mi">99</span><span class="o">&gt;</span>
        <span class="o">---</span> <span class="n">snip</span> <span class="o">---</span>
<span class="mh">0x00005555555547ca</span> <span class="o">&lt;+</span><span class="mi">106</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x5555555545f0</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span></code></pre></figure>

<p>Sedangkan apabila sama, akan melewati intruksi jne dan dan mengeluarkan pesan “Correct”.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="mh">0x00005555555547bc</span> <span class="o">&lt;+</span><span class="mi">92</span><span class="o">&gt;:</span>    <span class="n">call</span>   <span class="mh">0x5555555545f0</span> <span class="o">&lt;</span><span class="n">puts</span><span class="err">@</span><span class="n">plt</span><span class="o">&gt;</span></code></pre></figure>

<p>Dari pembahasan diatas, diketahui bahwa passcode yang valid adalah 31337
Apabila kita sudah mengerti uraian diatas, sebenar nya kita bisa mencari passcode yang tersimpan dalam register secara otomatis tanpa menghitung manual seperti diatas jika kita sudah sedikit mengerti intruksi assembly.</p>

<h1 id="proof-of-concept-2">Proof Of Concept #2</h1>
<p>Saya memasang breakpoint pada offset 0x00005555555547b0 #&lt;+80&gt;, untuk melihat nilai yang akan di <em>compare</em> dengan inputan kita yang telah tersimpan di rbp-0xc</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">b</span> <span class="o">*</span><span class="mh">0x00005555555547b0</span>
<span class="n">Breakpoint</span> <span class="mi">1</span> <span class="n">at</span> <span class="mh">0x5555555547b0</span>
<span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">r</span>
<span class="n">The</span> <span class="n">program</span> <span class="n">being</span> <span class="n">debugged</span> <span class="n">has</span> <span class="n">been</span> <span class="n">started</span> <span class="n">already</span><span class="p">.</span>
<span class="n">Start</span> <span class="n">it</span> <span class="n">from</span> <span class="n">the</span> <span class="n">beginning</span><span class="o">?</span> <span class="p">(</span><span class="n">y</span> <span class="n">or</span> <span class="n">n</span><span class="p">)</span> <span class="n">y</span>
<span class="n">Starting</span> <span class="nl">program</span><span class="p">:</span> <span class="o">~/</span><span class="n">rev</span> 
<span class="n">Enter</span> <span class="n">your</span> <span class="nl">passcode</span> <span class="p">:</span> <span class="mi">123456</span>
<span class="n">Breakpoint</span> <span class="mi">1</span><span class="p">,</span> <span class="mh">0x00005555555547b0</span> <span class="n">in</span> <span class="n">main</span> <span class="p">()</span>
<span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">x</span> <span class="err">$</span><span class="n">rbp</span><span class="o">-</span><span class="mh">0xc</span>
<span class="mh">0x7fffffffe244</span><span class="o">:</span>    <span class="mh">0x00007a69</span>
<span class="p">(</span><span class="n">gdb</span><span class="p">)</span> <span class="n">print</span> <span class="mh">0x00007a69</span>
<span class="err">$</span><span class="mi">1</span> <span class="o">=</span> <span class="mi">31337</span></code></pre></figure>

<p>Karena passcode yang valid sudah diketahui, bisa langsung membuktikan dengan menjalankan program nya.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span></span><span class="n">root</span><span class="err">@</span><span class="nl">kali</span><span class="p">:</span><span class="o">~</span><span class="err">#</span> <span class="p">.</span><span class="o">/</span><span class="n">rev</span>
<span class="n">Enter</span> <span class="n">your</span> <span class="nl">passcode</span> <span class="p">:</span> <span class="mi">31337</span>   
<span class="n">Correct</span></code></pre></figure>

<h1 id="akhir-kata">Akhir Kata…</h1>
<p>Saya sendiri sebenarnya tidak terlalu ahli dalam reverse engineering, saya menulis posting ini ditujukan kepada siapa saja yang ingin belajar sehingga bisa mendapatkan pengetahuan dasar mengenai reverse engineering. Jadi semoga tulisan ini dapat bermanfaat bagi kita semua.</p>

	  ]]></description>
	</item>

	<item>
	  <title>SharifCTF 2016 - UnloadMe</title>
	  <link>//suctf2016-unloadme</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-unloadme</guid>
	  <description><![CDATA[
	     <ul id="markdown-toc">
  <li><a href="#proof-of-concept" id="markdown-toc-proof-of-concept">Proof Of Concept</a></li>
</ul>

<p>Challenge RE SharifCTF 2016 UnloadMe berupa file PE32 Windows Executable</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file UnloadMe
UnloadMe: PE32 executable <span class="o">(</span>native<span class="o">)</span> Intel <span class="m">80386</span>, <span class="k">for</span> MS Windows</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Saya melakukan <em>disassembly</em> menggunakan Hopper, ditemukan <em>Hex String</em> mencurigakan pada register.</p>

<p><img src="https://raw.githubusercontent.com/rh4ma/rh4ma.github.io/master/_posts/UnloadME.png" alt="UnloadME.png" /></p>

<p>Apabila <em>Hex String</em> tersebut didecode akan menghasilkan cc043056a0a32cb5e104aeb2cf4ff7ba
flag : SharifCTF{cc043056a0a32cb5e104aeb2cf4ff7ba}</p>

	  ]]></description>
	</item>

	<item>
	  <title>SharifCTF 2016 - SCrack</title>
	  <link>//suctf2016-scrack</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-scrack</guid>
	  <description><![CDATA[
	     <p>Challenge RE SharifCTF 2016 SCrack berupa file elf binnary 64bit yang akan melakukan validasi key</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file SCrack
SCrack: ELF <span class="m">64</span>-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, 
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, 
<span class="k">for</span> GNU/Linux <span class="m">2</span>.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>d011afc29443bbb3ea2c72ef5ac15f8dc278397a, 
not stripped

root@kali:~/Desktop/SU CTF/RE# ./SCrack
Enter the valid key!
asasasasasas
Invalid Key! :<span class="o">(</span></code></pre></figure>

<p>Saat mencoba menggunakan <strong>ltrace</strong> terdapat output <em>Dont trace me!</em> dan percobaan <em>disassembly</em> menggunakan gdb ditemukan <em>ptrace</em> yang digunakan sebagai <em>anti-debugging technique</em></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# gdb -q SCrack
Reading symbols from SCrack...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
<span class="o">(</span>gdb<span class="o">)</span> disass main
Dump of assembler code <span class="k">for</span> <span class="k">function</span> main:
--- snip ---
   0x0000000000400a79 &lt;+44&gt;:	mov    <span class="nv">$0</span>x0,%eax
   0x0000000000400a7e &lt;+49&gt;:	callq  0x400910 &lt;ptrace@plt&gt;
   0x0000000000400a83 &lt;+54&gt;:	cmp    <span class="nv">$0</span>xffffffffffffffff,%rax
   0x0000000000400a87 &lt;+58&gt;:	sete   %al
   0x0000000000400a8a &lt;+61&gt;:	<span class="nb">test</span>   %al,%al
--- snip ---</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Dikarenakan menggunakan ltrace tidak bisa, saya mencoba melakukan <em>static analisys</em> menggunakan <strong>objdump</strong></p>

<p>Ditemukan instruksi yang akan memberikan “sesuatu” ke register esi</p>

<p><img src="https://raw.githubusercontent.com/rh4ma/rh4ma.github.io/master/_posts/SCRACK.png" alt="SCRACK.png" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# objdump -M intel -d SCrack <span class="p">|</span> grep esi <span class="p">|</span> awk <span class="s1">&#39;{print $8}&#39;</span> <span class="p">|</span> 
cut -f2 -d<span class="s2">&quot;,&quot;</span>  <span class="p">|</span> tr <span class="s2">&quot;\n&quot;</span> <span class="s2">&quot;,&quot;</span>

0x0,0x401064,0x401075,0x53,0x68,0x61,0x72,0x69,0x66,0x43,0x54,
0x46,0x7b,0x65,0x64,0x39,0x37,0x64,0x32,0x38,0x36,0x66,0x33,
0x35,0x36,0x64,0x61,0x64,0x62,0x35,0x63,0x64,0x65,0x30,0x39,
0x30,0x32,0x30,0x30,0x36,0x63,0x37,0x64,0x65,0x62,0x7d,0x400950,
0x49,0x6e,0x76,0x61,0x6c,0x69,0x64,0x20,0x4b,0x65,0x79,0x21,0x20,
0x3a,0x28,0x400950,esi,0x6022d1,0xffff,</code></pre></figure>

<p>Decode menggunakan python</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# python
&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> <span class="o">[</span>0x53,0x68,0x61,0x72,0x69,0x66,0x43,0x54,0x46,0x7b,0x65,
0x64,0x39,0x37,0x64,0x32,0x38,0x36,0x66,0x33,0x35,0x36,0x64,0x61,
0x64,0x62,0x35,0x63,0x64,0x65,0x30,0x39,0x30,0x32,0x30,0x30,0x36,
0x63,0x37,0x64,0x65,0x62,0x7d,0x49,0x6e,0x76,0x61,0x6c,0x69,0x64,
0x20,0x4b,0x65,0x79,0x21,0x20,0x3a,0x28<span class="o">]</span>
&gt;&gt;&gt; <span class="s2">&quot;&quot;</span>.join<span class="o">([</span> chr<span class="o">(</span>y<span class="o">)</span> <span class="k">for</span> y in x<span class="o">])</span>
<span class="s1">&#39;SharifCTF{ed97d286f356dadb5cde0902006c7deb}Invalid Key! :(&#39;</span></code></pre></figure>

<p>Flag : SharifCTF{ed97d286f356dadb5cde0902006c7deb}</p>

<h1 id="proof-of-concept-2">Proof Of Concept #2</h1>
<p>Cara lain juga dapat digunakan untuk mendapatkan flag pada challenge ini, yang saya rasa ini memang cara yang diharapkan untuk mendapatkan flag yaitu dengan memasukan key yang valid</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# objdump -M intel -d SCrack <span class="p">|</span> grep cmp <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span> <span class="p">|</span> 
cut -f2 -d<span class="s2">&quot;,&quot;</span>  <span class="p">|</span> tr <span class="s2">&quot;\n&quot;</span> <span class="s2">&quot;,&quot;</span>
0e,18,e8,ff,0x38,0x37,0x34,0x30,0x33,0x38,0x65,0x34,0x62,0x36,0x65,
0x32,0x39,0x62,0x66,0x30,0x38,0x39,0x38,0x62,0x67,0x34,0x66,0x30,0x32,
0x32,0x35,0x39,0x33,0x35,0x63,0x30,01,ff,cmp,</code></pre></figure>

<p>Decode menggunakan Python</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# python
&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> <span class="o">[</span>0x38,0x37,0x34,0x30,0x33,0x38,0x65,0x34,0x62,0x36,0x65,0x32,
0x39,0x62,0x66,0x30,0x38,0x39,0x38,0x62,0x67,0x34,0x66,0x30,0x32,0x32,
0x35,0x39,0x33,0x35,0x63,0x30<span class="o">]</span>
&gt;&gt;&gt; <span class="s2">&quot;&quot;</span>.join<span class="o">([</span> chr<span class="o">(</span>y<span class="o">)</span> <span class="k">for</span> y in x<span class="o">])</span>
<span class="s1">&#39;874038e4b6e29bf0898bg4f0225935c0&#39;</span>
&gt;&gt;&gt; exit<span class="o">()</span>

root@kali:~/Desktop/SU CTF/RE# ./SCrack
Enter the valid key!
874038e4b6e29bf0898bg4f0225935c0
SharifCTF<span class="o">{</span>ed97d286f356dadb5cde0902006c7deb<span class="o">}</span></code></pre></figure>


	  ]]></description>
	</item>

	<item>
	  <title>SharifCTF 2016 - Getit</title>
	  <link>//suctf2016-getit</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-getit</guid>
	  <description><![CDATA[
	     <p>Pada challenge RE ShariftCTF 2016 diberikan file elf binnary bernama getit, yang informasi nya seperti dibawah ini</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file getit
getit: ELF <span class="m">64</span>-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, 
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, 
<span class="k">for</span> GNU/Linux <span class="m">2</span>.6.24, 
BuildID<span class="o">[</span>sha1<span class="o">]=</span>e389cd7a4b9272ba80f85d7eb604176f6106c61e, not stripped</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Saya menggunakan gdb untuk melakukan debugging</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# gdb -q getit
Reading symbols from getit...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set</span> disassembly-flavor intel
<span class="o">(</span>gdb<span class="o">)</span> disass main
Dump of assembler code <span class="k">for</span> <span class="k">function</span> main:

--- snip ---  
   0x000000000040080d &lt;+183&gt;:	call   0x400620 &lt;fprintf@plt&gt;
   0x0000000000400812 &lt;+188&gt;:	mov    DWORD PTR <span class="o">[</span>rbp-0x3c<span class="o">]</span>,0x0
   0x0000000000400819 &lt;+195&gt;:	mov    eax,DWORD PTR <span class="o">[</span>rbp-0x3c<span class="o">]</span>
   0x000000000040081c &lt;+198&gt;:	movsxd rbx,eax
   0x000000000040081f &lt;+201&gt;:	mov    edi,0x6010e0
   0x0000000000400824 &lt;+206&gt;:	call   0x4005e0 &lt;strlen@plt&gt;
   0x0000000000400829 &lt;+211&gt;:	cmp    rbx,rax
   0x000000000040082c &lt;+214&gt;:	jae    0x4008b5 &lt;main+351&gt;
--- snip ---  </code></pre></figure>

<p>Ditemukan bagian menarik pada offset 0x000000000040081f at +201, dimana terdapat “sesuatu” yang disalin ke register edi.</p>

<p>Untuk melihat isi dari register edi, saya memasang <em>breakpoint</em> pada offset 0x0000000000400824 at +206</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span><span class="o">(</span>gdb<span class="o">)</span> b *0x0000000000400824
Breakpoint <span class="m">1</span> at 0x400824
<span class="o">(</span>gdb<span class="o">)</span> r
Starting program: /root/Desktop/SU CTF/RE/getit 

Breakpoint <span class="m">1</span>, 0x0000000000400824 in main <span class="o">()</span>
<span class="o">(</span>gdb<span class="o">)</span> x/s <span class="nv">$rdi</span>
0x6010e0 &lt;t&gt;:	<span class="s2">&quot;SharifCTF{b70c59275fcfa8aebf2d5911223c6589}&quot;</span></code></pre></figure>

<p>Flag : SharifCTF{b70c59275fcfa8aebf2d5911223c6589}</p>

	  ]]></description>
	</item>


</channel>
</rss>
