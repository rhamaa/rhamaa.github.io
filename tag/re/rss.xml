<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>127.0.0.1:4000</title>
   
   <link>127.0.0.1:4000</link>
   <description>CTF, InfoSec, Banana And More..</description>
   <language>en-uk</language>
   <managingEditor> Aiden Pearce</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>SharifCTF 2016 - UnloadMe</title>
	  <link>//suctf2016-unloadme</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-unloadme</guid>
	  <description><![CDATA[
	     <ul id="markdown-toc">
  <li><a href="#proof-of-concept" id="markdown-toc-proof-of-concept">Proof Of Concept</a></li>
</ul>

<p>Challenge RE SharifCTF 2016 UnloadMe berupa file PE32 Windows Executable</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file UnloadMe
UnloadMe: PE32 executable <span class="o">(</span>native<span class="o">)</span> Intel <span class="m">80386</span>, <span class="k">for</span> MS Windows</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Saya melakukan <em>disassembly</em> menggunakan Hopper, ditemukan <em>Hex String</em> mencurigakan pada register.</p>

<p><img src="https://raw.githubusercontent.com/rh4ma/rh4ma.github.io/master/_posts/UnloadME.png" alt="UnloadME.png" /></p>

<p>Apabila <em>Hex String</em> tersebut didecode akan menghasilkan cc043056a0a32cb5e104aeb2cf4ff7ba
flag : SharifCTF{cc043056a0a32cb5e104aeb2cf4ff7ba}</p>

	  ]]></description>
	</item>

	<item>
	  <title>SharifCTF 2016 - SCrack</title>
	  <link>//suctf2016-scrack</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-scrack</guid>
	  <description><![CDATA[
	     <p>Challenge RE SharifCTF 2016 SCrack berupa file elf binnary 64bit yang akan melakukan validasi key</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file SCrack
SCrack: ELF <span class="m">64</span>-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, 
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, 
<span class="k">for</span> GNU/Linux <span class="m">2</span>.6.24, BuildID<span class="o">[</span>sha1<span class="o">]=</span>d011afc29443bbb3ea2c72ef5ac15f8dc278397a, 
not stripped

root@kali:~/Desktop/SU CTF/RE# ./SCrack
Enter the valid key!
asasasasasas
Invalid Key! :<span class="o">(</span></code></pre></figure>

<p>Saat mencoba menggunakan <strong>ltrace</strong> terdapat output <em>Dont trace me!</em> dan percobaan <em>disassembly</em> menggunakan gdb ditemukan <em>ptrace</em> yang digunakan sebagai <em>anti-debugging technique</em></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# gdb -q SCrack
Reading symbols from SCrack...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
<span class="o">(</span>gdb<span class="o">)</span> disass main
Dump of assembler code <span class="k">for</span> <span class="k">function</span> main:
--- snip ---
   0x0000000000400a79 &lt;+44&gt;:	mov    <span class="nv">$0</span>x0,%eax
   0x0000000000400a7e &lt;+49&gt;:	callq  0x400910 &lt;ptrace@plt&gt;
   0x0000000000400a83 &lt;+54&gt;:	cmp    <span class="nv">$0</span>xffffffffffffffff,%rax
   0x0000000000400a87 &lt;+58&gt;:	sete   %al
   0x0000000000400a8a &lt;+61&gt;:	<span class="nb">test</span>   %al,%al
--- snip ---</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Dikarenakan menggunakan ltrace tidak bisa, saya mencoba melakukan <em>static analisys</em> menggunakan <strong>objdump</strong></p>

<p>Ditemukan instruksi yang akan memberikan “sesuatu” ke register esi</p>

<p><img src="https://raw.githubusercontent.com/rh4ma/rh4ma.github.io/master/_posts/SCRACK.png" alt="SCRACK.png" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# objdump -M intel -d SCrack <span class="p">|</span> grep esi <span class="p">|</span> awk <span class="s1">&#39;{print $8}&#39;</span> <span class="p">|</span> 
cut -f2 -d<span class="s2">&quot;,&quot;</span>  <span class="p">|</span> tr <span class="s2">&quot;\n&quot;</span> <span class="s2">&quot;,&quot;</span>

0x0,0x401064,0x401075,0x53,0x68,0x61,0x72,0x69,0x66,0x43,0x54,
0x46,0x7b,0x65,0x64,0x39,0x37,0x64,0x32,0x38,0x36,0x66,0x33,
0x35,0x36,0x64,0x61,0x64,0x62,0x35,0x63,0x64,0x65,0x30,0x39,
0x30,0x32,0x30,0x30,0x36,0x63,0x37,0x64,0x65,0x62,0x7d,0x400950,
0x49,0x6e,0x76,0x61,0x6c,0x69,0x64,0x20,0x4b,0x65,0x79,0x21,0x20,
0x3a,0x28,0x400950,esi,0x6022d1,0xffff,</code></pre></figure>

<p>Decode menggunakan python</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# python
&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> <span class="o">[</span>0x53,0x68,0x61,0x72,0x69,0x66,0x43,0x54,0x46,0x7b,0x65,
0x64,0x39,0x37,0x64,0x32,0x38,0x36,0x66,0x33,0x35,0x36,0x64,0x61,
0x64,0x62,0x35,0x63,0x64,0x65,0x30,0x39,0x30,0x32,0x30,0x30,0x36,
0x63,0x37,0x64,0x65,0x62,0x7d,0x49,0x6e,0x76,0x61,0x6c,0x69,0x64,
0x20,0x4b,0x65,0x79,0x21,0x20,0x3a,0x28<span class="o">]</span>
&gt;&gt;&gt; <span class="s2">&quot;&quot;</span>.join<span class="o">([</span> chr<span class="o">(</span>y<span class="o">)</span> <span class="k">for</span> y in x<span class="o">])</span>
<span class="s1">&#39;SharifCTF{ed97d286f356dadb5cde0902006c7deb}Invalid Key! :(&#39;</span></code></pre></figure>

<p>Flag : SharifCTF{ed97d286f356dadb5cde0902006c7deb}</p>

<h1 id="proof-of-concept-2">Proof Of Concept #2</h1>
<p>Cara lain juga dapat digunakan untuk mendapatkan flag pada challenge ini, yang saya rasa ini memang cara yang diharapkan untuk mendapatkan flag yaitu dengan memasukan key yang valid</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# objdump -M intel -d SCrack <span class="p">|</span> grep cmp <span class="p">|</span> awk <span class="s1">&#39;{print $5}&#39;</span> <span class="p">|</span> 
cut -f2 -d<span class="s2">&quot;,&quot;</span>  <span class="p">|</span> tr <span class="s2">&quot;\n&quot;</span> <span class="s2">&quot;,&quot;</span>
0e,18,e8,ff,0x38,0x37,0x34,0x30,0x33,0x38,0x65,0x34,0x62,0x36,0x65,
0x32,0x39,0x62,0x66,0x30,0x38,0x39,0x38,0x62,0x67,0x34,0x66,0x30,0x32,
0x32,0x35,0x39,0x33,0x35,0x63,0x30,01,ff,cmp,</code></pre></figure>

<p>Decode menggunakan Python</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# python
&gt;&gt;&gt; <span class="nv">x</span> <span class="o">=</span> <span class="o">[</span>0x38,0x37,0x34,0x30,0x33,0x38,0x65,0x34,0x62,0x36,0x65,0x32,
0x39,0x62,0x66,0x30,0x38,0x39,0x38,0x62,0x67,0x34,0x66,0x30,0x32,0x32,
0x35,0x39,0x33,0x35,0x63,0x30<span class="o">]</span>
&gt;&gt;&gt; <span class="s2">&quot;&quot;</span>.join<span class="o">([</span> chr<span class="o">(</span>y<span class="o">)</span> <span class="k">for</span> y in x<span class="o">])</span>
<span class="s1">&#39;874038e4b6e29bf0898bg4f0225935c0&#39;</span>
&gt;&gt;&gt; exit<span class="o">()</span>

root@kali:~/Desktop/SU CTF/RE# ./SCrack
Enter the valid key!
874038e4b6e29bf0898bg4f0225935c0
SharifCTF<span class="o">{</span>ed97d286f356dadb5cde0902006c7deb<span class="o">}</span></code></pre></figure>


	  ]]></description>
	</item>

	<item>
	  <title>SharifCTF 2016 - Getit</title>
	  <link>//suctf2016-getit</link>
	  <author>Aiden Pearce</author>
	  <pubDate>2016-12-22T00:00:00+08:00</pubDate>
	  <guid>//suctf2016-getit</guid>
	  <description><![CDATA[
	     <p>Pada challenge RE ShariftCTF 2016 diberikan file elf binnary bernama getit, yang informasi nya seperti dibawah ini</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# file getit
getit: ELF <span class="m">64</span>-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, 
dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, 
<span class="k">for</span> GNU/Linux <span class="m">2</span>.6.24, 
BuildID<span class="o">[</span>sha1<span class="o">]=</span>e389cd7a4b9272ba80f85d7eb604176f6106c61e, not stripped</code></pre></figure>

<h1 id="proof-of-concept">Proof Of Concept</h1>
<p>Saya menggunakan gdb untuk melakukan debugging</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span>root@kali:~/Desktop/SU CTF/RE# gdb -q getit
Reading symbols from getit...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
<span class="o">(</span>gdb<span class="o">)</span> <span class="nb">set</span> disassembly-flavor intel
<span class="o">(</span>gdb<span class="o">)</span> disass main
Dump of assembler code <span class="k">for</span> <span class="k">function</span> main:

--- snip ---  
   0x000000000040080d &lt;+183&gt;:	call   0x400620 &lt;fprintf@plt&gt;
   0x0000000000400812 &lt;+188&gt;:	mov    DWORD PTR <span class="o">[</span>rbp-0x3c<span class="o">]</span>,0x0
   0x0000000000400819 &lt;+195&gt;:	mov    eax,DWORD PTR <span class="o">[</span>rbp-0x3c<span class="o">]</span>
   0x000000000040081c &lt;+198&gt;:	movsxd rbx,eax
   0x000000000040081f &lt;+201&gt;:	mov    edi,0x6010e0
   0x0000000000400824 &lt;+206&gt;:	call   0x4005e0 &lt;strlen@plt&gt;
   0x0000000000400829 &lt;+211&gt;:	cmp    rbx,rax
   0x000000000040082c &lt;+214&gt;:	jae    0x4008b5 &lt;main+351&gt;
--- snip ---  </code></pre></figure>

<p>Ditemukan bagian menarik pada offset 0x000000000040081f at +201, dimana terdapat “sesuatu” yang disalin ke register edi.</p>

<p>Untuk melihat isi dari register edi, saya memasang <em>breakpoint</em> pada offset 0x0000000000400824 at +206</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span></span><span class="o">(</span>gdb<span class="o">)</span> b *0x0000000000400824
Breakpoint <span class="m">1</span> at 0x400824
<span class="o">(</span>gdb<span class="o">)</span> r
Starting program: /root/Desktop/SU CTF/RE/getit 

Breakpoint <span class="m">1</span>, 0x0000000000400824 in main <span class="o">()</span>
<span class="o">(</span>gdb<span class="o">)</span> x/s <span class="nv">$rdi</span>
0x6010e0 &lt;t&gt;:	<span class="s2">&quot;SharifCTF{b70c59275fcfa8aebf2d5911223c6589}&quot;</span></code></pre></figure>

<p>Flag : SharifCTF{b70c59275fcfa8aebf2d5911223c6589}</p>

	  ]]></description>
	</item>


</channel>
</rss>
